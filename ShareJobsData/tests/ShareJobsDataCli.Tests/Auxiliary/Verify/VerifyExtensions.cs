namespace ShareJobsDataCli.Tests.Auxiliary.Verify;

internal static partial class VerifyExtensions
{
    public static SettingsTask AppendToMethodName(
        this SettingsTask settingsTask,
        string appendValue,
        [CallerMemberName] string methodName = "")
    {
        return settingsTask.UseMethodName($"{methodName}.{appendValue}");
    }

    public static SettingsTask ScrubAppName(this SettingsTask settingsTask)
    {
        // when running on windows the app name is set to 'testhost'
        // when running on unix the app name is set to 'dotnet testhost.dll'
        // this scrubber makes sure the output is equal on both
        return settingsTask.ScrubLinesWithReplace(line => line
            .Replace("dotnet testhost.dll", "{scrubbed app name}", StringComparison.OrdinalIgnoreCase)
            .Replace("testhost", "{scrubbed app name}", StringComparison.OrdinalIgnoreCase));
    }

    public static SettingsTask ScrubGitHubMultiLineDelimiter(this SettingsTask settingsTask)
    {
        // for security reasons, the delimiter for multi line used on the GitHub step output
        // should be random. The app generates 8 bytes and converts them to a string which results
        // in 8 pairs of characters from a-f or A-F or 0-9 and each pair is separated by a dash.
        // The random generated bytes are suffixed by the value 'EOF_'.
        // This scrubber identifies that pattern and makes sure the verify files only contain a
        // delimiter with EOF value, stripping the random bytes part.
        return settingsTask.ScrubLinesWithReplace(line =>
        {
            var regex = RandomMultiLineDelimiterRegex();
            return regex.IsMatch(line)
              ? regex.Replace(line, "EOF")
              : line;
        });
    }

    // identifies patterns such as EOF_0A-8E-FE-D8-F0-F5-A1-1C
    [GeneratedRegex("EOF_([a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2}-[a-fA-F0-9]{2})", RegexOptions.ExplicitCapture, matchTimeoutMilliseconds: 5000)]
    private static partial Regex RandomMultiLineDelimiterRegex();
}
